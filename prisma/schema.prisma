// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Level {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(100)
  accounts Account[]

  @@map("levels")
}

model Account {
  id        Int        @id @default(autoincrement())
  username  String     @db.VarChar(100)
  password  String?    @db.VarChar(100)
  token     String?    @db.VarChar(100)
  level_id  Int

  level     Level      @relation(fields: [level_id], references: [id])
  employees Employee[]

  @@map("accounts")
}

model Employee {
  id                Int               @id @default(autoincrement())
  name              String            @db.VarChar(200)
  birth_date        DateTime          @db.DateTime()
  phone             String            @db.VarChar(20)
  account_id        Int             

  account           Account           @relation(fields: [account_id], references: [id])
  schedules         Schedule[]
  employee_loans    EmployeeLoan[]
  salary_deductions SalaryDeduction[]
  dailytaskemployee DailyTaskEmployee[]
  salary Salary[]

  @@map("employees")
}

model Schedule {
  id                Int         @id @default(autoincrement())
  date              DateTime    @db.Date()
  status            String      @db.VarChar(25)
  attendance_status String      @db.VarChar(25)
  employee_id       Int

  employee          Employee    @relation(fields: [employee_id], references: [id])
  attendances       Attendance[]
  leaves            Leave[]
  paid_leaves       PaidLeave[]


  @@map("schedules")
}

model EmployeeLoan {
  id             Int       @id @default(autoincrement())
  amount         Int       @db.Int()
  date           DateTime  @db.Date()
  status         String    @db.VarChar(100)
  employee_id    Int

  employee       Employee  @relation(fields: [employee_id], references: [id])

  @@map("employee_loans")
}

model SalaryDeduction {
  id             Int       @id @default(autoincrement())
  amount         Int       @db.Int()
  date           DateTime  @db.Date()
  employee_id    Int

  employee       Employee  @relation(fields: [employee_id], references: [id])

  @@map("salary_deductions")
}

model Attendance {
  id          Int       @id @default(autoincrement())
  check_in    DateTime  @db.DateTime()
  check_out   DateTime  @db.DateTime()
  status      String    @db.VarChar(100)
  schedule_id Int

  schedule    Schedule  @relation(fields: [schedule_id], references: [id])

  @@map("attendances")
}

model Leave {
  id          Int       @id @default(autoincrement())
  reason      String    @db.Text()
  status      String    @db.VarChar(50)
  schedule_id Int

  schedule    Schedule  @relation(fields: [schedule_id], references: [id])

  @@map("leaves")
}


model PaidLeave {
  id          Int       @id @default(autoincrement())
  reason      String    @db.Text()
  status      String    @db.VarChar(50)
  schedule_id Int

  schedule    Schedule  @relation(fields: [schedule_id], references: [id])

  @@map("paid_leaves")
}

model DailyTask {
  id   Int    @id @default(autoincrement())
  task String @db.Text()

  dailytaskemployee DailyTaskEmployee[]
  @@map("daily_tasks")
}

model DailyTaskEmployee {
  id         Int    @id @default(autoincrement())
  day        String @db.VarChar(100)
  task_id    Int
  employee_id Int

  dailytask    DailyTask  @relation(fields: [task_id], references: [id])
  employee     Employee   @relation(fields: [employee_id], references: [id])
  @@map("daily_task_employees")
}

model Salary {
  id Int @id @default(autoincrement())
  amount Int @db.Int()
  bonus Int @db.Int()
  salary_deduction Int @db.Int()
  date DateTime @db.DateTime()
  employee_id  Int

  employee Employee @relation(fields: [employee_id], references: [id])

  @@map("salaries")
}


