// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id        Int       @id @default(autoincrement())
  username  String    @db.VarChar(100)
  password  String?   @db.VarChar(100)
  level     String    @db.VarChar(100)
  status    String    @db.VarChar(100)

  employees Employee[]

  @@map("accounts")
}

model Employee {
  id             Int               @id @default(autoincrement())
  name           String            @db.VarChar(200)
  birth_date     DateTime?          @db.DateTime()
  phone          String?            @db.VarChar(20)
  profile_pic    String?           @db.VarChar(200)

  created_at     DateTime          @db.Timestamp()
  account_id     Int

  account        Account           @relation(fields: [account_id], references: [id])
  schedules      Schedule[]
  cash_advances  CashAdvance[]
  task_employees TaskEmployee[]
  leave_requests LeaveRequest[]
  notifications  Notification[]
  salary         Salary[]

  @@map("employees")
}

model Schedule {
  id                Int          @id @default(autoincrement())
  date              DateTime     @db.Date()
  status            String       @db.VarChar(25)
  attendance_status String       @db.VarChar(25)
  shift_code        String       @db.VarChar(25)
  start_time        String       @db.VarChar(20)
  end_time          String       @db.VarChar(20)
  employee_id       Int

  employee          Employee     @relation(fields: [employee_id], references: [id])
  attendances       Attendance[]

  @@map("schedules")
}

model CashAdvance {
  id           Int       @id @default(autoincrement())
  amount       Int       @db.Int()
  date         DateTime  @db.Date()
  reason       String?    @db.Text()
  status       String    @db.VarChar(100)
  created_at   DateTime  @db.Timestamp()
  employee_id  Int

  employee     Employee  @relation(fields: [employee_id], references: [id])

  @@map("cash_advances")
}

model Attendance {
  id               Int       @id @default(autoincrement())
  check_in         DateTime  @db.DateTime()
  check_out        DateTime? @db.DateTime()
  status           String?   @db.VarChar(100)
  snapshot         String    @db.VarChar(200) 
  attendance_long  String?   @db.VarChar(255)
  attendance_lat   String?   @db.VarChar(255)
  schedule_id      Int

  schedule         Schedule  @relation(fields: [schedule_id], references: [id])

  @@map("attendances")
}

model LeaveRequest {
  id          Int       @id @default(autoincrement())
  reason      String    @db.Text()
  type        String    @db.VarChar(25)
  date        DateTime  @db.Date()
  status      String    @db.VarChar(50)
  attachment  String?   @db.VarChar(255)
  created_at  DateTime  @db.Timestamp()
  employee_id Int

  employee        Employee            @relation(fields: [employee_id], references: [id])

  @@map("leave_requests")
}

model DailyTask {
  id         Int     @id @default(autoincrement())
  task_code  String  @db.VarChar(10)
  task_name  String  @db.Text()

  taskemployees TaskEmployee[]

  @@map("daily_tasks")
}

model TaskEmployee {
  id              Int                 @id @default(autoincrement())
  day             String              @db.VarChar(20)
  employee_id     Int
  task_id         Int

  employee        Employee            @relation(fields: [employee_id], references: [id])
  daily_task      DailyTask           @relation(fields: [task_id], references: [id])
  dailytaskemployee DailyTaskEmployee[]

  @@map("task_employees")
}

model DailyTaskEmployee {
  id              Int           @id @default(autoincrement())
  status          String        @db.VarChar(25)
  date            DateTime      @db.DateTime()
  task_employee_id Int

  task_employee   TaskEmployee  @relation(fields: [task_employee_id], references: [id])

  @@map("daily_task_employees")
}

model Salary {
  id              Int       @id @default(autoincrement())
  amount          Int       @db.Int()
  bonus           Int?      @db.Int()
  salary_deduction Int?     @db.Int()
  cash_advance    Int?      @db.Int()
  note            String?   @db.Text()
  date            DateTime  @db.DateTime()
  created_at      DateTime  @db.Timestamp()
  employee_id     Int

  employee        Employee  @relation(fields: [employee_id], references: [id])

  @@map("salaries")
}

model Notification {
  id           Int       @id @default(autoincrement())
  type         String    @db.VarChar(50)
  message      String?    @db.Text()
  was_read     Boolean   @db.TinyInt()
  created_at   DateTime  @db.Timestamp()
  employee_id  Int

  employee     Employee  @relation(fields: [employee_id], references: [id])

  @@map("notifications")
}
